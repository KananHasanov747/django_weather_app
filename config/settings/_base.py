"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import sys
import environ

from pathlib import Path
from loguru import logger
from aiocache import caches

env = environ.Env(
    DJANGO_LOG_LEVEL=(str, "INFO"), DJANGO_ALLOWED_HOSTS=(list, ["localhost"])
)
environ.Env.read_env(os.getenv("DJANGO_ENV_NAME"))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("DJANGO_SECRET_KEY")

TESTING = "test" in sys.argv

INTERNAL_IPS = [
    "127.0.0.1",
]

AUTH_USER_MODEL = "users.User"

CSRF_COOKIE_SECURE = True

SESSION_COOKIE_SECURE = True

# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # plugins and tools
    "compressor",
    "django_htmx",
    "django_cotton",
]

PROJECT_APPS = [
    "server",
    "users",
    "client",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # from 'whitenoise' library
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "server.middleware.RestrictDirectUrlAccessMiddleware",  # restrict direct access to api endpoint
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "config.middleware.MinifyHTMLMiddleware",
    "django_htmx.middleware.HtmxMiddleware",  # from 'django-htmx' library
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.template.context_processors.media",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "debug": True,
        },
    },
]

ASGI_APPLICATION = "config.asgi.application"

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.memcached.PyMemcacheCache",
        "LOCATION": env("DJANGO_CACHE_LOCATION"),
    }
}

caches.set_config(
    {
        "default": {
            "cache": "aiocache.SimpleMemoryCache",
            "serializer": {"class": "aiocache.serializers.JsonSerializer"},
        },
    }
)

FIXTURE_DIRS = (BASE_DIR / "fixtures",)


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Media files

MEDIA_URL = "media/"

MEDIA_ROOT = BASE_DIR / "media"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

STATICFILES_DIRS = [BASE_DIR / "static"]

STATIC_ROOT = BASE_DIR / "staticfiles"

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "compressor.finders.CompressorFinder",
]

STORAGES = {
    "default": {"BACKEND": "django.core.files.storage.FileSystemStorage"},
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}


COMPRESS_CSS_HASHING_METHOD = "content"

COMPRESS_FILTERS = {
    "css": [
        "compressor.filters.css_default.CssAbsoluteFilter",
        "compressor.filters.cssmin.rCSSMinFilter",
    ],
    "js": [
        "compressor.filters.jsmin.JSMinFilter",
    ],
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Django Cotton

COTTON_DIR = "components"


# Logging

LOGGING_CONFIG = None

LOGGING = {
    "handlers": [
        dict(
            sink=sys.stderr,
            colorize=True,
            format="<fg #3e424b>{time:YYYY-MM-D HH:mm:ss,SSS!UTC}</fg #3e424b> | {message}",
            filter=lambda record: record["module"] == "asgi",
            backtrace=False,
            diagnose=False,
            level="INFO",
        ),
        dict(
            sink=sys.stderr,
            colorize=True,
            format="<green>{time:YYYY-MM-D HH:mm:ss,SSS!UTC}</green> {level} {message} {extra}",
            filter=lambda record: record["name"].endswith(".views"),
            backtrace=False,
            diagnose=False,
        ),
    ],
}

logger.configure(**LOGGING)

# TODO: replace logging with loguru
# LOGGING = {
#     "version": 1,
#     # The version number of our log
#     "disable_existing_loggers": False,
#     "formatters": {
#         # Simple format for console logs
#         "simple": {
#             "()": "colorlog.ColoredFormatter",
#             "format": "{log_color}{levelname} [{name}] - {message}",
#             "style": "{",
#             "log_colors": {
#                 "DEBUG": "white",
#                 "INFO": "green",
#                 "WARNING": "yellow",
#                 "ERROR": "red",
#                 "CRITICAL": "bold_red",
#             },
#         },
#         # verbose format for console logs
#         "verbose": {
#             "()": "colorlog.ColoredFormatter",
#             "format": "{log_color}{asctime} {levelname} [{name}] - {message}",
#             "style": "{",
#             "log_colors": {
#                 "DEBUG": "white",
#                 "INFO": "green",
#                 "WARNING": "yellow",
#                 "ERROR": "red",
#                 "CRITICAL": "bold_red",
#             },
#         },
#     },
#     "handlers": {
#         # A handler for WARNING. It is basically writing the WARNING messages into a file called WARNING.log
#         "file": {
#             "level": env("DJANGO_LOG_LEVEL"),  # DJANGO_LOG_LEVEL=WARNING
#             "class": "logging.FileHandler",
#             "filename": BASE_DIR / "WARNING.log",
#             "formatter": "verbose",
#         },
#         # A handler for all other logs, and will be used to print logs to console
#         "console": {
#             "level": "INFO",
#             "class": "logging.StreamHandler",
#             "formatter": "verbose",
#         },
#     },
#     "loggers": {
#         "": {  # Root logger
#             "handlers": ["file", "console"],
#             "level": env("DJANGO_LOG_LEVEL"),  # DJANGO_LOG_LEVEL=INFO
#             "propagate": True,
#         },
#         "django": {
#             "handlers": ["console"],
#             "level": "INFO",
#             "propagate": True,
#         },
#     },
# }
