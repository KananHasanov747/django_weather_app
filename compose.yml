services:
  app:
    # Defines the application service
    build:
      context: . # Build the image from the current directory
      dockerfile: Dockerfile # Use the Dockerfile in the current directory for the build
    image: django_weather_app
    env_file:
      # Specify a file containing environment variables to be loaded into the container
      - .env.prod # Load environment variables from the .env.prod file (if needed)
    # Sets environment variables that the container will use
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.production
      DJANGO_CACHE_LOCATION: caching:11211
    # volumes:
    #   - static_volume:/app/staticfiles:rw # NGINX serves static (rw -> read/write)
    ports:
      # Exposes ports for access from outside the container
      - "8000:8000" # Maps container's port 8000 to host's port 8000
    networks:
      - app_network
    depends_on:
      # Defines the dependency order for services; 'app' depends on 'db' and 'caching' in this case
      # - db
      - caching
    command: >
      sh -c "
      uv run --no-dev manage.py migrate; 
      uv run --no-dev -m sqlite3 db.sqlite3 < weather_cities_dump.sql > /dev/null 2>&1; 
      uv run --no-dev daphne config.asgi:application --bind 0.0.0.0 --port 8000; 
      "

  # db:
  #   # Example database service (using PostgreSQL here)
  #   image: postgres:17-alpine # Use the official PostgreSQL 17 image based on Alpine from Docker Hub
  #   environment:
  #     # Set environment variables for the database
  #     POSTGRES_USER: example # Database username
  #     POSTGRES_PASSWORD: example # Database password
  #   volumes:
  #     # Define volumes to persist database data
  #     - db_data:/var/lib/postgresql/data # Store database data in a Docker volume
  #   networks:
  #     - app_network # Use a custom network for communication between services

  # caching:
  #   # Redis service for caching
  #   image: redis:alpine # Use the official Redis image based on Alpine
  #   volumes:
  #     - redis_data:/data # Persist Redis data in a Docker volume (optional, depends on use case)
  #   networks:
  #     - app_network # Ensure that the caching service is on the same network

  # nginx:
  #   image: nginx:stable-alpine
  #   ports:
  #     - "8080:80" # host:container
  #   volumes:
  #     - ./nginx/conf.d:/etc/nginx/conf.d
  #     - static_volume:/usr/share/nginx/html/static
  #   networks:
  #     - app_network
  #   depends_on:
  #     - app

  caching:
    image: memcached:alpine
    ports:
      - "11211:11211"
    command:
      - --memory-limit=64
    networks:
      - app_network

# volumes:
#   # Declare volumes that are used for persistent data storage
#   db_data: # This volume is used by the 'db' service to store Postgres data
#   redis_data: # This volume is used by the 'caching' service to store Redis data (optional)
# static_volume: # Declare volume for static files

networks:
  # Define custom networks for services to communicate
  app_network:
    driver: bridge # Use the default 'bridge' network driver
    labels:
      com.docker.compose.network: app_network
